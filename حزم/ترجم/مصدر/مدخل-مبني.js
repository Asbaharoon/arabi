exports.code = "function __arabi__translate__(obj, map, options={}) {\n_@let proxyHandler = {};\n_@\n_@if (map) {\n_@_@if (map instanceof Function) map = map(obj); // dynamic maps\n_@_@let mapMap = [[], []]; // [arabicKey[], originalKey[]]\n_@_@Object.entries(map).forEach(([k, v])=>{\n_@_@_@let _k = (typeof v === 'string') ? v : v[0];\n_@_@_@mapMap[0].push(k);\n_@_@_@mapMap[1].push(_k);\n_@_@});\n_@_@Object.assign(proxyHandler, {\n_@_@_@get(target, prop) {\n_@_@_@_@let v = map[prop];\n_@_@_@_@if (v && !(prop in target)) {\n_@_@_@_@_@if (typeof v === 'string') {\n_@_@_@_@_@_@let value = target[v];\n_@_@_@_@_@_@value = typeof value == 'function' ? value.bind(target) : value;\n_@_@_@_@_@_@return value;\n_@_@_@_@_@}\n_@_@_@_@_@if (v[1] || v[2]) {\n_@_@_@_@_@_@// we translate another object in the targeted propperty\n_@_@_@_@_@_@let value = target[v[0]];\n_@_@_@_@_@_@value = typeof value == 'function' ? value.bind(target) : value;\n_@_@_@_@_@_@let translatedObject = __arabi__translate__(value, v[1], v[2]);\n_@_@_@_@_@_@Object.defineProperty(target, prop, { value: translatedObject });\n_@_@_@_@_@_@return translatedObject;\n_@_@_@_@_@} \n_@_@_@_@_@throw new Error(\"unexpecting thing happened while translation (@arabi)\");\n_@_@_@_@}\n_@_@_@_@let value = target[prop];\n_@_@_@_@value = typeof value == 'function' ? value.bind(target) : value;\n_@_@_@_@return value;\n_@_@_@},\n_@_@_@\n_@_@_@set(target, prop, value) {\n_@_@_@_@let validSetting = true;\n_@_@_@_@if(prop in map) {\n_@_@_@_@_@prop = map[prop];\n_@_@_@_@_@if (typeof prop !== 'string') prop = prop[0];\n_@_@_@_@}\n_@_@_@_@let i;\n_@_@_@_@if ((i = mapMap[1].indexOf[prop]) > -1) {\n_@_@_@_@_@// delete the cached value, translate again when getting using the arabic key.\n_@_@_@_@_@validSetting = delete target[mapMap[0][i]];\n_@_@_@_@}\n_@_@_@_@target[prop] = value;\n_@_@_@_@return validSetting;\n_@_@_@},\n_@_@_@\n_@_@_@has(target, prop) {\n_@_@_@_@if (prop in map) prop = map[prop];\n_@_@_@_@prop === typeof prop === 'string' ? prop : prop[0];\n_@_@_@_@return prop in target;\n_@_@_@},\n_@_@_@\n_@_@_@// hasProperty(target, prop) {\n_@_@_@//   return true;\n_@_@_@// },\n_@_@_@// getPrototypeOf(target, prop) {\n_@_@_@//   return Object.getPrototypeOf(o);\n_@_@_@// },\n_@_@_@// setPrototypeOf(target, prop) {\n_@_@_@//   return true;\n_@_@_@// },\n_@_@_@// isExtensible(target, prop) {\n_@_@_@//   return true;\n_@_@_@// },\n_@_@_@// preventExtensions(target, prop) {\n_@_@_@//   return true;\n_@_@_@// },\n_@_@_@// defineProperty(target, prop) {\n_@_@_@//   return true;\n_@_@_@// },\n_@_@_@// getOwnPropertyDescriptor(target, prop) {\n_@_@_@//   return true;\n_@_@_@// },\n_@_@_@// ownKeys(target, prop) {\n_@_@_@//   return true;\n_@_@_@// },\n_@_@});\n_@}\n\n_@if (options && options.returnMap) {\n_@_@proxyHandler.apply = function(target, thisArg, args) {\n_@_@_@let value = Reflect.apply(target, thisArg, args);\n_@_@_@let _map = options.returnMap[0],\n_@_@_@_@_options = options.returnMap[1];\n_@_@_@if (_map || _options) \n_@_@_@_@value = __arabi__translate__(value, _map, _options);\n_@_@_@return value;\n_@_@}\n_@}\n\n_@if (options && options.constructMap) {\n_@_@proxyHandler.construct = function(target, args) {\n_@_@_@let value = Reflect.construct(target, args);\n_@_@_@let _map = options.constructMap[0],\n_@_@_@_@_options = options.constructMap[1];\n_@_@_@if (_map || _options) \n_@_@_@_@value = __arabi__translate__(value, _map, _options);\n_@_@_@return value;\n_@_@}\n_@}\n\n_@return new Proxy(obj, proxyHandler);\n}\n";
exports.requireCode = "var __require__cache__ = {};\nfunction __arabi__translate__require__(__module, __query) {\n_@if(__query in __require__cache__) return __require__cache__[__query];\n_@if (__query in __arabi__modules__tmap__) {\n_@_@let m = __arabi__modules__tmap__[__query];\n_@_@let _ = __arabi__translate__(__module, m[1], m[2]);\n_@_@Object.assign(__require__cache__, __module, { value: _ });\n_@_@return _;\n_@}\n_@return __module;\n};";
exports.indentPlaceholder = "_@";
exports.translate = require('./مترجم').default;
exports.translateRequire = require('./استدعي').default;
